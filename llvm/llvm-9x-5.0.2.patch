diff -ru llvm-5.0.2.orig/CMakeLists.txt llvm-5.0.2.src/CMakeLists.txt
--- llvm-5.0.2.orig/CMakeLists.txt	2018-03-28 22:25:17.000000000 +0200
+++ llvm-5.0.2.src/CMakeLists.txt	2022-10-29 12:25:47.195996600 +0200
@@ -829,7 +829,8 @@
 if( MINGW )
   # People report that -O3 is unreliable on MinGW. The traditional
   # build also uses -O2 for that reason:
-  llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE "-O3" "-O2")
+  # llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE "-O3" "-O2")
+  # JH: ^ many mingw versions are broken, but my not! :-)
 endif()
 
 # Put this before tblgen. Else we have a circular dependence.
Only in llvm-5.0.2.src: CMakeLists.txt.bak
diff -ru llvm-5.0.2.orig/lib/Support/RandomNumberGenerator.cpp llvm-5.0.2.src/lib/Support/RandomNumberGenerator.cpp
--- llvm-5.0.2.orig/lib/Support/RandomNumberGenerator.cpp	2016-10-11 20:17:26.000000000 +0200
+++ llvm-5.0.2.src/lib/Support/RandomNumberGenerator.cpp	2022-10-26 22:06:20.357176500 +0200
@@ -19,6 +19,8 @@
 #include "llvm/Support/raw_ostream.h"
 #ifdef LLVM_ON_WIN32
 #include "Windows/WindowsSupport.h"
+#include <cstdlib>
+#include <ctime>
 #else
 #include "Unix/Unix.h"
 #endif
@@ -64,6 +66,7 @@
 // Get random vector of specified size
 std::error_code llvm::getRandomBytes(void *Buffer, size_t Size) {
 #ifdef LLVM_ON_WIN32
+#if 0
   HCRYPTPROV hProvider;
   if (CryptAcquireContext(&hProvider, 0, 0, PROV_RSA_FULL,
                            CRYPT_VERIFYCONTEXT | CRYPT_SILENT)) {
@@ -73,6 +76,17 @@
   }
   return std::error_code(GetLastError(), std::system_category());
 #else
+  uint8_t *ptr = (uint8_t *)Buffer;
+  srand(time(NULL));
+  
+  for(size_t i = 0; i < Size; i++)
+  {
+  	ptr[i] = rand() & 0xFF;
+  }
+#endif
+  
+  return std::error_code();
+#else
   int Fd = open("/dev/urandom", O_RDONLY);
   if (Fd != -1) {
     std::error_code Ret;
Only in llvm-5.0.2.src/lib/Support: RandomNumberGenerator.cpp.bak
diff -ru llvm-5.0.2.orig/lib/Support/Windows/DynamicLibrary.inc llvm-5.0.2.src/lib/Support/Windows/DynamicLibrary.inc
--- llvm-5.0.2.orig/lib/Support/Windows/DynamicLibrary.inc	2017-07-12 23:22:45.000000000 +0200
+++ llvm-5.0.2.src/lib/Support/Windows/DynamicLibrary.inc	2022-09-25 12:35:46.814139800 +0200
@@ -71,6 +71,7 @@
 static bool GetProcessModules(HANDLE H, DWORD &Bytes, HMODULE *Data = nullptr) {
   // EnumProcessModules will fail on Windows 64 while some versions of
   // MingW-32 don't have EnumProcessModulesEx.
+#if 0
   if (
 #ifdef _WIN64
       !EnumProcessModulesEx(H, Data, Bytes, &Bytes, LIST_MODULES_64BIT)
@@ -84,6 +85,9 @@
     return false;
   }
   return true;
+#else
+	return false;
+#endif
 }
 
 void *DynamicLibrary::HandleSet::DLSym(void *Handle, const char *Symbol) {
diff -ru llvm-5.0.2.orig/lib/Support/Windows/Path.inc llvm-5.0.2.src/lib/Support/Windows/Path.inc
--- llvm-5.0.2.orig/lib/Support/Windows/Path.inc	2017-03-21 00:55:20.000000000 +0100
+++ llvm-5.0.2.src/lib/Support/Windows/Path.inc	2022-09-25 13:50:56.394621100 +0200
@@ -235,6 +235,7 @@
 
 // We can't use symbolic links for windows.
 std::error_code create_link(const Twine &to, const Twine &from) {
+#if 0
   // Convert to utf-16.
   SmallVector<wchar_t, 128> wide_from;
   SmallVector<wchar_t, 128> wide_to;
@@ -247,6 +248,9 @@
     return mapWindowsError(::GetLastError());
 
   return std::error_code();
+#else
+  return mapWindowsError(ERROR_ACCESS_DENIED); // links on fat32...
+#endif
 }
 
 std::error_code create_hard_link(const Twine &to, const Twine &from) {
@@ -284,6 +288,7 @@
 
 static std::error_code is_local_internal(SmallVectorImpl<wchar_t> &Path,
                                          bool &Result) {
+#if 0
   SmallVector<wchar_t, 128> VolumePath;
   size_t Len = 128;
   while (true) {
@@ -322,6 +327,10 @@
     return make_error_code(errc::no_such_file_or_directory);
   }
   llvm_unreachable("Unreachable!");
+#else
+  Result = true;
+  return std::error_code();
+#endif
 }
 
 std::error_code is_local(const Twine &path, bool &result) {
@@ -377,6 +386,7 @@
     if (i > 0)
       ::Sleep(1);
 
+#if 0
     if (TryReplace) {
       // Try ReplaceFile first, as it is able to associate a new data stream
       // with the destination even if the destination file is currently open.
@@ -404,6 +414,7 @@
           ReplaceError != ERROR_SHARING_VIOLATION)
         break;
     }
+#endif
 
     if (::MoveFileExW(wide_from.begin(), wide_to.begin(),
                       MOVEFILE_COPY_ALLOWED | MOVEFILE_REPLACE_EXISTING))
@@ -1074,13 +1085,14 @@
 namespace path {
 static bool getKnownFolderPath(KNOWNFOLDERID folderId,
                                SmallVectorImpl<char> &result) {
-  wchar_t *path = nullptr;
+  /*wchar_t *path = nullptr;
   if (::SHGetKnownFolderPath(folderId, KF_FLAG_CREATE, nullptr, &path) != S_OK)
     return false;
 
   bool ok = !UTF16ToUTF8(path, ::wcslen(path), result);
   ::CoTaskMemFree(path);
-  return ok;
+  return ok;*/
+  return false;
 }
 
 bool getUserCacheDir(SmallVectorImpl<char> &Result) {
diff -ru llvm-5.0.2.orig/lib/Support/Windows/Process.inc llvm-5.0.2.src/lib/Support/Windows/Process.inc
--- llvm-5.0.2.orig/lib/Support/Windows/Process.inc	2017-03-31 15:48:21.000000000 +0200
+++ llvm-5.0.2.src/lib/Support/Windows/Process.inc	2022-09-25 13:11:10.306745900 +0200
@@ -55,7 +55,8 @@
   // GetNativeSystemInfo() provides the physical page size which may differ
   // from GetSystemInfo() in 32-bit applications running under WOW64.
   SYSTEM_INFO info;
-  GetNativeSystemInfo(&info);
+  //GetNativeSystemInfo(&info);
+  GetSystemInfo(&info);
   // FIXME: FileOffset in MapViewOfFile() should be aligned to not dwPageSize,
   // but dwAllocationGranularity.
   return static_cast<unsigned>(info.dwPageSize);
diff -ru llvm-5.0.2.orig/lib/Support/Windows/Program.inc llvm-5.0.2.src/lib/Support/Windows/Program.inc
--- llvm-5.0.2.orig/lib/Support/Windows/Program.inc	2017-03-31 16:26:44.000000000 +0200
+++ llvm-5.0.2.src/lib/Support/Windows/Program.inc	2022-09-25 12:40:55.263064900 +0200
@@ -386,6 +386,7 @@
 
   // Assign the process to a job if a memory limit is defined.
   ScopedJobHandle hJob;
+#if 0
   if (memoryLimit != 0) {
     hJob = CreateJobObjectW(0, 0);
     bool success = false;
@@ -408,6 +409,7 @@
       return false;
     }
   }
+#endif
 
   return true;
 }
diff -ru llvm-5.0.2.orig/lib/Support/Windows/Signals.inc llvm-5.0.2.src/lib/Support/Windows/Signals.inc
--- llvm-5.0.2.orig/lib/Support/Windows/Signals.inc	2017-03-31 16:58:52.000000000 +0200
+++ llvm-5.0.2.src/lib/Support/Windows/Signals.inc	2022-09-25 14:00:37.280084500 +0200
@@ -519,6 +519,7 @@
 #endif
 
 void llvm::sys::PrintStackTrace(raw_ostream &OS) {
+#if 0
   STACKFRAME64 StackFrame = {};
   CONTEXT Context = {};
   ::RtlCaptureContext(&Context);
@@ -536,6 +537,7 @@
   StackFrame.AddrFrame.Mode = AddrModeFlat;
   PrintStackTraceForThread(OS, GetCurrentProcess(), GetCurrentThread(),
                            StackFrame, &Context);
+#endif
 }
 
 
@@ -603,7 +605,7 @@
 /// \returns true if a valid value for DumpFolder exists, false otherwise.
 static bool GetDumpFolder(HKEY Key,
                           llvm::SmallVectorImpl<char> &ResultDirectory) {
-  using llvm::sys::windows::UTF16ToUTF8;
+  /*using llvm::sys::windows::UTF16ToUTF8;
 
   if (!Key)
     return false;
@@ -635,7 +637,8 @@
   if (UTF16ToUTF8(ExpandBuffer.data(), ExpandBufferSize - 1, ResultDirectory))
     return false;
 
-  return true;
+  return true;*/
+  return false;
 }
 
 /// \brief Populate ResultType with a valid MINIDUMP_TYPE based on the value of
@@ -652,7 +655,7 @@
 ///
 /// \returns true if a valid value for ResultType can be set, false otherwise.
 static bool GetDumpType(HKEY Key, MINIDUMP_TYPE &ResultType) {
-  if (!Key)
+ /* if (!Key)
     return false;
 
   DWORD DumpType;
@@ -682,7 +685,8 @@
   default:
     return false;
   }
-  return true;
+  return true;*/
+  return false;
 }
 
 /// \brief Write a Windows dump file containing process information that can be
diff -ru llvm-5.0.2.orig/lib/Support/Windows/WindowsSupport.h llvm-5.0.2.src/lib/Support/Windows/WindowsSupport.h
--- llvm-5.0.2.orig/lib/Support/Windows/WindowsSupport.h	2017-06-06 14:11:24.000000000 +0200
+++ llvm-5.0.2.src/lib/Support/Windows/WindowsSupport.h	2022-09-25 14:21:42.863388800 +0200
@@ -27,8 +27,8 @@
 #undef _WIN32_IE
 
 // Require at least Windows 7 API.
-#define _WIN32_WINNT 0x0601
-#define _WIN32_IE    0x0800 // MinGW at it again. FIXME: verify if still needed.
+#define _WIN32_WINNT 0x0400
+#define _WIN32_IE    0x0400 // MinGW at it again. FIXME: verify if still needed.
 #define WIN32_LEAN_AND_MEAN
 #ifndef NOMINMAX
 #define NOMINMAX
@@ -49,12 +49,116 @@
 // Must be included after windows.h
 #include <wincrypt.h>
 
+#if _WIN32_WINNT <= 0x0400
+
+inline DWORD GetFinalPathNameByHandleW(HANDLE hFile, LPWSTR lpszFilePath, DWORD  cchFilePath,DWORD  dwFlags)
+{
+	return ERROR_FILE_NOT_FOUND;
+}
+
+#elif _WIN32_WINNT < 0x502
+
+#include <psapi.h>
+
+/* https://learn.microsoft.com/en-us/windows/win32/memory/obtaining-a-file-name-from-a-file-handle */
+inline DWORD GetFinalPathNameByHandleW(HANDLE hFile, LPWSTR lpszFilePath, DWORD  cchFilePath,DWORD  dwFlags)
+{
+  DWORD ret = ERROR_FILE_NOT_FOUND;
+  wchar_t filename[MAX_PATH+1];
+  HANDLE hFileMap;
+
+  // Get the file size.
+  DWORD dwFileSizeHi = 0;
+  DWORD dwFileSizeLo = GetFileSize(hFile, &dwFileSizeHi); 
+
+  if( dwFileSizeLo == 0 && dwFileSizeHi == 0 )
+  {
+     return GetLastError();
+  }
+
+  // Create a file mapping object.
+  hFileMap = CreateFileMapping(hFile, 
+                    NULL, 
+                    PAGE_READONLY,
+                    0, 
+                    1,
+                    NULL);
+
+  if (hFileMap) 
+  {
+    // Create a file mapping to get the file name.
+    void* pMem = MapViewOfFile(hFileMap, FILE_MAP_READ, 0, 0, 1);
+
+    if (pMem) 
+    {
+      if (GetMappedFileNameW (GetCurrentProcess(), 
+                             pMem, 
+                             filename,
+                             MAX_PATH))
+      {
+
+        // Translate path with device name to drive letters.
+        wchar_t temp[MAX_PATH];
+        temp[0] = L'\0';
+
+        if (GetLogicalDriveStringsW(MAX_PATH-1, temp)) 
+        {
+          wchar_t szName[MAX_PATH];
+          wchar_t szDrive[3] = L" :";
+          bool bFound = FALSE;
+          wchar_t* p = temp;
+
+          do 
+          {
+            // Copy the drive letter to the template string
+            *szDrive = *p;
+
+            // Look up each device name
+            if (QueryDosDeviceW(szDrive, szName, MAX_PATH))
+            {
+              size_t uNameLen = wcslen(szName);
+
+              if (uNameLen < MAX_PATH) 
+              {
+                bFound = wcsncmp(filename, szName, uNameLen) == 0
+                         && *(filename + uNameLen) == L'\\';
+
+                if (bFound) 
+                {
+                  // Reconstruct pszFilename using szTempFile
+                  // Replace device path with DOS path
+                  swprintf(lpszFilePath, cchFilePath, L"%s%s", szDrive, filename+uNameLen);
+                  ret = 0;
+                }
+              }
+            }
+
+            // Go to the next NULL character.
+            while (*p++);
+          } while (!bFound && *p); // end of string
+        }
+      }
+      UnmapViewOfFile(pMem);
+    }
+
+    CloseHandle(hFileMap);
+  }
+  
+  return ret;
+}
+
+
+#endif
+
+typedef DWORD (WINAPI * GetVersion_f)();
+
 /// Determines if the program is running on Windows 8 or newer. This
 /// reimplements one of the helpers in the Windows 8.1 SDK, which are intended
 /// to supercede raw calls to GetVersionEx. Old SDKs, Cygwin, and MinGW don't
 /// yet have VersionHelpers.h, so we have our own helper.
 inline bool RunningWindows8OrGreater() {
   // Windows 8 is version 6.2, service pack 0.
+#if 0
   OSVERSIONINFOEXW osvi = {};
   osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
   osvi.dwMajorVersion = 6;
@@ -69,6 +173,30 @@
   return VerifyVersionInfoW(&osvi, VER_MAJORVERSION | VER_MINORVERSION |
                                        VER_SERVICEPACKMAJOR,
                             Mask) != FALSE;
+#else
+  HMODULE hKernel32 = GetModuleHandleA("kernel32.dll");
+  if(hKernel32)
+  {
+  	GetVersion_f pGetVersion = (GetVersion_f)GetProcAddress(hKernel32, "GetVersion");
+  	if(pGetVersion)
+  	{
+  		DWORD version = pGetVersion();
+  		DWORD dwMajorVersion = version & 0xFF;
+  		DWORD dwMinorVersion = (version >> 8) & 0xFF;
+  		
+  		if(dwMajorVersion < 6)
+  		{
+  			return false;
+  		}
+  		else if(dwMajorVersion == 6 && dwMinorVersion < 2)
+  		{
+  			return false;
+  		}
+  	}
+  }
+  
+  return true;
+#endif
 }
 
 inline bool MakeErrMsg(std::string *ErrMsg, const std::string &prefix) {
